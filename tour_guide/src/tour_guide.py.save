#! /usr/bin/env python

#this is the client for controling the novelis tour bot

import rospy
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from math import radians, degrees
from actionlib_msgs.msg import *
from geometry_msgs.msg import Point

class tour():
 
  def read_locations(self):
   #read in location list
   locations = {"origin":{
                   "x": 0.0,
                   "y":0.0,
                   "rz":0.0},
                 "loc1":{
                   "x": 0.0,
                   "y":0.0,
                   "rz":0.0},
}
   return locations


  def __init__(self):
    locations = self.read_locations()
    rospy.init_node('tour',anonymous = False)
    for i in locations:
      rospy.loginfo("moving to %s",locations[i])
      


  def shutdown(self):
    #stop the program at the end of tour
    rospy.loginfo("quit program")
    rospy.sleep()
  
  def moveToGoal(self,x,y,rz):
    #define a client to send movement commands to the movebase server 
    ac =actionlib.SimpleActionClient("move_base", MoveBaseAction)
    
    while(not ac.wait_for_server(rospy.Duration.from_sec(5.0))):
      rospy.loginfo("waiting for server")
    goal = MoveBaseGoal()
    
    goal.target_pose.frame_id = "map"
    goal.target_pose.header.stamp = rospy.Time.now()
    
    goal.target_pose.pose.position = Point(x,y,0)
    goal.target_pose.pose.orientation.x = 0.0
    goal.target_pose.pose.orientation.y = 0.0
    goal.target_pose.pose.orientation.z = rz
    goal.target_pose.pose.orientation.w = 1.0
   
    rospy.loginfo("Sending goal location")
    ac.send_goal(goal)

    ac.wait_for_result(rospy.Duration(60))

    if(ac.get_state()== GoalStatus.SUCCEEDED):
      rospy.loginfo("reached goal")
      return True
    else:
      rospy.loginfo("the robot failed to reach the goal")
      return False

  
if __name__ == '__main__':
  tour()
  rospy.spin()
  
